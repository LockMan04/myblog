import React from 'react';
import { useAuth } from '../contexts/AuthContext';
import { useNavigate } from 'react-router-dom';
import { toast } from 'sonner';
import { EllipsisVertical, Pencil, Eye , EyeOff, Archive, Trash2, RotateCcw } from 'lucide-react';
import { Dropdown, DropdownItem, DropdownSeparator } from './Dropdown';
import { toggleBlogVisibility, archiveBlog, softDeleteBlog, restoreBlog } from '../firebase/blogService';

const BlogPost = ({ title, content, category, date, author, excerpt, imageUrl, id, authorId, published, archived, deleted, onUpdate }) => {
    const { currentUser, role } = useAuth();
    const navigate = useNavigate();
    const defaultImage = "https://placehold.co/400x400";
    
    // Ki·ªÉm tra xem user hi·ªán t·∫°i c√≥ ph·∫£i l√† t√°c gi·∫£ ho·∫∑c admin kh√¥ng
    const isAuthor = currentUser && currentUser.uid === authorId;
    const isAdmin = role === 'admin';
    const canEdit = isAuthor || isAdmin;
    
    // T·∫°o excerpt t·ª´ content n·∫øu kh√¥ng c√≥ excerpt
    const getExcerpt = () => {
        if (excerpt) return excerpt;
        
        // N·∫øu content c√≥ HTML tags (t·ª´ Quill), lo·∫°i b·ªè ch√∫ng
        const tempDiv = document.createElement('div');
        tempDiv.innerHTML = content;
        const plainText = tempDiv.textContent || tempDiv.innerText || '';
        
        return plainText.length > 150 
            ? plainText.substring(0, 150) + '...' 
            : plainText;
    };
    
    // T·∫°o slug t·ª´ title v√† id
    const createSlug = () => {
        const slug = title.toLowerCase()
            .replace(/[^\w\s-]/g, '') // Lo·∫°i b·ªè k√Ω t·ª± ƒë·∫∑c bi·ªát
            .replace(/\s+/g, '-')      // Thay kho·∫£ng tr·∫Øng b·∫±ng -
            .trim();
        return id ? `${slug}-${id}` : slug;
    };
    
    const postSlug = createSlug();

    // Handlers cho c√°c actions
    const handleToggleVisibility = async () => {
        try {
            await toggleBlogVisibility(id, published);
            toast.success(
                published ? 'ƒê√£ ·∫©n b√†i vi·∫øt' : 'ƒê√£ hi·ªÉn th·ªã b√†i vi·∫øt',
                {
                    description: published ? 'B√†i vi·∫øt ƒë√£ ƒë∆∞·ª£c ·∫©n kh·ªèi trang ch·ªß' : 'B√†i vi·∫øt ƒë√£ ƒë∆∞·ª£c hi·ªÉn th·ªã tr√™n trang ch·ªß',
                    icon: published ? 'üëÅÔ∏è‚Äçüó®Ô∏è' : 'üëÅÔ∏è'
                }
            );
            if (onUpdate) onUpdate(); // Callback ƒë·ªÉ refresh danh s√°ch
        } catch (error) {
            console.error('L·ªói khi thay ƒë·ªïi tr·∫°ng th√°i hi·ªÉn th·ªã:', error);
            toast.error('C√≥ l·ªói x·∫£y ra', {
                description: 'Kh√¥ng th·ªÉ thay ƒë·ªïi tr·∫°ng th√°i hi·ªÉn th·ªã. Vui l√≤ng th·ª≠ l·∫°i.'
            });
        }
    };

    const handleArchive = async () => {
        toast.warning('X√°c nh·∫≠n l∆∞u tr·ªØ b√†i vi·∫øt', {
            description: 'B√†i vi·∫øt s·∫Ω ƒë∆∞·ª£c chuy·ªÉn v√†o m·ª•c l∆∞u tr·ªØ v√† ·∫©n kh·ªèi trang ch·ªß',
            icon: 'üìÅ',
            action: {
                label: 'X√°c nh·∫≠n',
                onClick: async () => {
                    try {
                        await archiveBlog(id);
                        toast.success('ƒê√£ l∆∞u tr·ªØ b√†i vi·∫øt', {
                            description: 'B√†i vi·∫øt ƒë√£ ƒë∆∞·ª£c chuy·ªÉn v√†o m·ª•c l∆∞u tr·ªØ. B·∫°n c√≥ th·ªÉ kh√¥i ph·ª•c b·∫•t c·ª© l√∫c n√†o.',
                            icon: 'üìÅ'
                        });
                        if (onUpdate) onUpdate();
                    } catch (error) {
                        console.error('L·ªói khi l∆∞u tr·ªØ:', error);
                        toast.error('C√≥ l·ªói x·∫£y ra', {
                            description: 'Kh√¥ng th·ªÉ l∆∞u tr·ªØ b√†i vi·∫øt. Vui l√≤ng th·ª≠ l·∫°i.'
                        });
                    }
                }
            },
            cancel: {
                label: 'H·ªßy',
                onClick: () => {}
            }
        });
    };

    const handleSoftDelete = async () => {
        toast.error('X√°c nh·∫≠n x√≥a b√†i vi·∫øt', {
            description: 'B√†i vi·∫øt s·∫Ω b·ªã x√≥a t·∫°m th·ªùi v√† c√≥ th·ªÉ kh√¥i ph·ª•c trong 14 ng√†y',
            icon: 'üóëÔ∏è',
            action: {
                label: 'X√°c nh·∫≠n x√≥a',
                onClick: async () => {
                    try {
                        await softDeleteBlog(id);
                        toast.warning('ƒê√£ x√≥a b√†i vi·∫øt', {
                            description: 'B√†i vi·∫øt ƒë√£ ƒë∆∞·ª£c x√≥a t·∫°m th·ªùi. B√†i vi·∫øt s·∫Ω b·ªã x√≥a vƒ©nh vi·ªÖn sau 14 ng√†y.',
                            icon: 'üóëÔ∏è'
                        });
                        if (onUpdate) onUpdate();
                    } catch (error) {
                        console.error('L·ªói khi x√≥a:', error);
                        toast.error('C√≥ l·ªói x·∫£y ra', {
                            description: 'Kh√¥ng th·ªÉ x√≥a b√†i vi·∫øt. Vui l√≤ng th·ª≠ l·∫°i.'
                        });
                    }
                }
            },
            cancel: {
                label: 'H·ªßy',
                onClick: () => {}
            }
        });
    };

    const handleRestore = async () => {
        try {
            await restoreBlog(id);
            toast.success('ƒê√£ kh√¥i ph·ª•c b√†i vi·∫øt', {
                description: 'B√†i vi·∫øt ƒë√£ ƒë∆∞·ª£c kh√¥i ph·ª•c th√†nh c√¥ng.',
                icon: '‚Ü©Ô∏è'
            });
            if (onUpdate) onUpdate();
        } catch (error) {
            console.error('L·ªói khi kh√¥i ph·ª•c:', error);
            toast.error('C√≥ l·ªói x·∫£y ra', {
                description: 'Kh√¥ng th·ªÉ kh√¥i ph·ª•c b√†i vi·∫øt. Vui l√≤ng th·ª≠ l·∫°i.'
            });
        }
    };
    
    return (
        <article className="blog-post">
            <div className="post-image">
                <img 
                    src={imageUrl || defaultImage} 
                    alt={title}
                    onError={(e) => {
                        e.target.src = defaultImage;
                    }}
                />
                <div className="image-overlay">
                    <span className="category">{category}</span>
                    {canEdit && (
                        <div className="post-menu-wrapper">
                            <Dropdown
                                align="end"
                                sideOffset={5}
                                className="post-menu-dropdown"
                                trigger={
                                    <button 
                                        className="post-menu-btn"
                                        aria-label="T√πy ch·ªçn b√†i vi·∫øt"
                                    >
                                        <EllipsisVertical className='w-4 h-4' />
                                    </button>
                                }
                            >
                                <DropdownItem 
                                    className="menu-item"
                                    onSelect={() => navigate(`/edit-blog/${id}`)}
                                >
                                    <Pencil style={{ width: '22px', height: '22px' }} strokeWidth={2} />
                                    Ch·ªânh s·ª≠a
                                </DropdownItem>
                                
                                {isAdmin && !isAuthor && (
                                    <>
                                        <DropdownSeparator className="menu-divider" />
                                        <div style={{ padding: '8px 12px', fontSize: '12px', color: '#666', background: '#f8f9fa' }}>
                                            üëë Quy·ªÅn Admin
                                        </div>
                                    </>
                                )}
                                
                                <DropdownSeparator className="menu-divider" />
                                
                                {deleted ? (
                                    <DropdownItem 
                                        className="menu-item"
                                        onSelect={handleRestore}
                                    >
                                        <RotateCcw style={{ width: '22px', height: '22px' }} strokeWidth={2} />
                                        Kh√¥i ph·ª•c
                                    </DropdownItem>
                                ) : (
                                    <>
                                        {published ? (
                                            <DropdownItem 
                                                className="menu-item"
                                                onSelect={handleToggleVisibility}
                                            >
                                                <EyeOff style={{ width: '22px', height: '22px' }} strokeWidth={2} />
                                                ·∫®n b√†i vi·∫øt
                                            </DropdownItem>
                                        ) : (
                                            <DropdownItem 
                                                className="menu-item"
                                                onSelect={handleToggleVisibility}
                                            >
                                                <Eye style={{ width: '22px', height: '22px' }} strokeWidth={2} />
                                                Hi·ªÉn th·ªã
                                            </DropdownItem>
                                        )}
                                        
                                        <DropdownItem 
                                            className="menu-item"
                                            onSelect={handleArchive}
                                        >
                                            <Archive style={{ width: '22px', height: '22px' }} strokeWidth={2} />
                                            L∆∞u tr·ªØ
                                        </DropdownItem>
                                        
                                        <DropdownSeparator className="menu-divider" />
                                        
                                        <DropdownItem 
                                            className="menu-item danger"
                                            onSelect={handleSoftDelete}
                                        >
                                            <Trash2 style={{ width: '22px', height: '22px' }} strokeWidth={2} />
                                            X√≥a b√†i vi·∫øt
                                        </DropdownItem>
                                    </>
                                )}
                            </Dropdown>
                        </div>
                    )}
                </div>
            </div>
            <div className="post-content">
                <div className="post-meta">
                    <span className="date">{date}</span>
                    <span className="author">b·ªüi {author}</span>
                </div>
                <h2 className="post-title">
                    <button 
                        className="post-title-link"
                        onClick={() => navigate(`/post/${postSlug}`)}
                    >
                        {title}
                    </button>
                </h2>
                <div className="post-excerpt">
                    <p>{getExcerpt()}</p>
                </div>
                <button 
                    className="read-more"
                    onClick={() => navigate(`/post/${postSlug}`)}
                >
                    ƒê·ªçc ti·∫øp 
                </button>
            </div>
        </article>
    );
};

export default BlogPost;