import React, { useState, useEffect } from 'react';
import { useNavigate, useParams } from 'react-router-dom';
import ReactQuill from 'react-quill';
import { toast } from 'sonner';
import { addDoc, collection, serverTimestamp, doc, updateDoc } from 'firebase/firestore';
import { db } from '../firebase/config';
import { getBlogById } from '../firebase/blogService';
import { useAuth } from '../contexts/AuthContext';
import { Slab } from 'react-loading-indicators';
import Header from '../components/Header';
import Footer from '../components/Footer';
import 'react-quill/dist/quill.snow.css';
import '../styles/CreateBlog.css';

const CreateBlog = () => {
  const navigate = useNavigate();
  const { id } = useParams(); // ID for editing
  const { currentUser, role } = useAuth();
  const [title, setTitle] = useState('');
  const [content, setContent] = useState('');
  const [category, setCategory] = useState('C√¥ng ngh·ªá');
  const [imageUrl, setImageUrl] = useState('');
  const [published, setPublished] = useState(true);
  const [loading, setLoading] = useState(false);
  const [loadingBlog, setLoadingBlog] = useState(false);
  const [error, setError] = useState('');
  const [originalBlog, setOriginalBlog] = useState(null);

  const isEditMode = !!id;
  const isAdmin = role === 'admin';

  const categories = [
    'C√¥ng ngh·ªá', 'Lifestyle', 'Du l·ªãch', '·∫®m th·ª±c', 
    'Th·ªÉ thao', 'Gi·∫£i tr√≠', 'Gi√°o d·ª•c', 'S·ª©c kh·ªèe'
  ];

  const quillModules = {
    toolbar: [
      [{ 'header': [1, 2, 3, false] }],
      ['bold', 'italic', 'underline', 'strike'],
      [{ 'color': [] }, { 'background': [] }],
      [{ 'list': 'ordered'}, { 'list': 'bullet' }],
      [{ 'align': [] }],
      ['link', 'image'],
      ['clean']
    ],
  };

  // Load blog data for editing
  useEffect(() => {
    if (isEditMode) {
      loadBlogForEdit();
    }
  }, [id, isEditMode]);

  const loadBlogForEdit = async () => {
    try {
      setLoadingBlog(true);
      setError('');
      
      const blogData = await getBlogById(id);
      
      if (!blogData) {
        setError('B√†i vi·∫øt kh√¥ng t·ªìn t·∫°i.');
        return;
      }

      // Check permissions
      const isAuthor = currentUser && currentUser.uid === blogData.authorId;
      if (!isAuthor && !isAdmin) {
        setError('B·∫°n kh√¥ng c√≥ quy·ªÅn ch·ªânh s·ª≠a b√†i vi·∫øt n√†y.');
        return;
      }

      setOriginalBlog(blogData);
      setTitle(blogData.title);
      setContent(blogData.content);
      setCategory(blogData.category);
      setImageUrl(blogData.imageUrl || '');
      setPublished(blogData.published);
      
    } catch (error) {
      console.error('L·ªói khi t·∫£i b√†i vi·∫øt:', error);
      setError('Kh√¥ng th·ªÉ t·∫£i b√†i vi·∫øt. Vui l√≤ng th·ª≠ l·∫°i.');
    } finally {
      setLoadingBlog(false);
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    if (!title.trim() || !content.trim()) {
      setError('Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß ti√™u ƒë·ªÅ v√† n·ªôi dung');
      return;
    }

    if (!currentUser) {
      setError('B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ vi·∫øt blog');
      return;
    }

    console.log('Current user:', currentUser.uid, currentUser.email);

    try {
      setLoading(true);
      setError('');

      // T·∫°o excerpt t·ª´ content (lo·∫°i b·ªè HTML tags)
      const tempDiv = document.createElement('div');
      tempDiv.innerHTML = content;
      const plainText = tempDiv.textContent || tempDiv.innerText || '';
      const excerpt = plainText.length > 150 
        ? plainText.substring(0, 150) + '...' 
        : plainText;

      if (isEditMode) {
        // Update existing blog
        const blogRef = doc(db, 'blogs', id);
        const updateData = {
          title: title.trim(),
          content: content,
          excerpt: excerpt,
          category: category,
          imageUrl: imageUrl.trim() || `https://placehold.co/400x300/3498db/ffffff?text=${encodeURIComponent(category)}`,
          updatedAt: serverTimestamp(),
          published: published
        };

        console.log('ƒêang c·∫≠p nh·∫≠t blog:', updateData);
        await updateDoc(blogRef, updateData);
        console.log('Blog ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t');
        
      } else {
        // Create new blog
        const blogPost = {
          title: title.trim(),
          content: content,
          excerpt: excerpt,
          category: category,
          author: currentUser.displayName || currentUser.email || '·∫®n danh',
          authorId: currentUser.uid,
          imageUrl: imageUrl.trim() || `https://placehold.co/400x300/3498db/ffffff?text=${encodeURIComponent(category)}`,
          date: serverTimestamp(),
          createdAt: serverTimestamp(),
          updatedAt: serverTimestamp(),
          likes: 0,
          views: 0,
          published: published,
          archived: false
        };

        console.log('ƒêang th√™m blog:', blogPost);
        const docRef = await addDoc(collection(db, 'blogs'), blogPost);
        console.log('Blog ƒë√£ ƒë∆∞·ª£c th√™m v·ªõi ID: ', docRef.id);
      }
      
      // Chuy·ªÉn v·ªÅ trang qu·∫£n l√Ω blog
      navigate('/manage-blogs');
      
    } catch (error) {
      console.error('L·ªói khi l∆∞u blog: ', error);
      console.error('Error code:', error.code);
      console.error('Error message:', error.message);
      
      // X·ª≠ l√Ω l·ªói c·ª• th·ªÉ
      if (error.code === 'permission-denied') {
        setError('Kh√¥ng c√≥ quy·ªÅn l∆∞u blog. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.');
      } else if (error.code === 'unauthenticated') {
        setError('B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ l∆∞u blog.');
      } else {
        setError(`C√≥ l·ªói x·∫£y ra khi l∆∞u blog: ${error.message}`);
      }
    } finally {
      setLoading(false);
    }
  };

  const handleCancel = () => {
    if (title.trim() || content.trim()) {
      toast.info('H·ªßy t·∫°o b√†i vi·∫øt', {
        description: 'N·ªôi dung ch∆∞a l∆∞u s·∫Ω b·ªã m·∫•t',
        action: {
          label: 'X√°c nh·∫≠n',
          onClick: () => navigate(-1)
        }
      });
    } else {
      navigate(-1);
    }
  };

  if (!currentUser) {
    return (
      <div className="create-blog-page">
        <Header />
        <div className="create-blog-container">
          <div className="auth-required">
            <h2>B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ vi·∫øt blog</h2>
            <p>Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ t·∫°o b√†i vi·∫øt m·ªõi.</p>
            <button onClick={() => navigate('/login')} className="btn-login">
              ƒêƒÉng nh·∫≠p
            </button>
          </div>
        </div>
        <Footer />
      </div>
    );
  }

  if (loadingBlog) {
    return (
      <div className="create-blog-page">
        <Header />
        <div className="create-blog-container">
          <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', minHeight: '400px' }}>
            <div style={{ textAlign: 'center' }}>
              <Slab color={["#25df25", "#2582df", "#df25df", "#df8225"]} size="medium" />
              <p style={{ marginTop: '20px', color: 'var(--text-secondary)' }}>ƒêang t·∫£i b√†i vi·∫øt...</p>
            </div>
          </div>
        </div>
        <Footer />
      </div>
    );
  }

  return (
    <div className="create-blog-page">
      <Header />
      
      {loading && (
        <div className="loading-overlay">
          <Slab color={["#25df25", "#2582df", "#df25df", "#df8225"]} />
          <p>{isEditMode ? 'ƒêang c·∫≠p nh·∫≠t b√†i vi·∫øt...' : 'ƒêang t·∫°o b√†i vi·∫øt...'}</p>
        </div>
      )}

      <div className="create-blog-container">
        <div className="create-blog-header">
          <h1>{isEditMode ? 'Ch·ªânh s·ª≠a b√†i vi·∫øt' : 'Vi·∫øt b√†i m·ªõi'}</h1>
          {isEditMode && originalBlog && isAdmin && currentUser.uid !== originalBlog.authorId && (
            <div className="admin-notice">
              <span className="admin-badge">üëë ƒêang ch·ªânh s·ª≠a v·ªõi quy·ªÅn Admin</span>
              <span className="original-author">T√°c gi·∫£ g·ªëc: {originalBlog.author}</span>
            </div>
          )}
          <div className="header-actions">
            <button onClick={handleCancel} className="btn-cancel">
              <i className="fas fa-times"></i>
              H·ªßy
            </button>
            <button onClick={handleSubmit} className="btn-save" disabled={loading}>
              <i className="fas fa-save"></i>
              {loading ? (isEditMode ? 'ƒêang c·∫≠p nh·∫≠t...' : 'ƒêang l∆∞u...') : (isEditMode ? 'C·∫≠p nh·∫≠t' : 'ƒêƒÉng b√†i')}
            </button>
          </div>
        </div>

        <form onSubmit={handleSubmit} className="create-blog-form">
          {error && <div className="error-message">{error}</div>}
          
          <div className="form-section">
            <div className="form-group">
              <label htmlFor="title">Ti√™u ƒë·ªÅ b√†i vi·∫øt *</label>
              <input
                type="text"
                id="title"
                value={title}
                onChange={(e) => setTitle(e.target.value)}
                placeholder="Nh·∫≠p ti√™u ƒë·ªÅ h·∫•p d·∫´n cho b√†i vi·∫øt..."
                required
                className="title-input"
              />
            </div>

            <div className="form-row">
              <div className="form-group">
                <label htmlFor="category">Danh m·ª•c</label>
                <select
                  id="category"
                  value={category}
                  onChange={(e) => setCategory(e.target.value)}
                  className="category-select"
                >
                  {categories.map(cat => (
                    <option key={cat} value={cat}>{cat}</option>
                  ))}
                </select>
              </div>

              <div className="form-group">
                <label htmlFor="imageUrl">URL ·∫£nh ƒë·∫°i di·ªán</label>
                <input
                  type="url"
                  id="imageUrl"
                  value={imageUrl}
                  onChange={(e) => setImageUrl(e.target.value)}
                  placeholder="https://example.com/image.jpg"
                  className="image-input"
                />
              </div>
            </div>

            <div className="form-group content-group">
              <label htmlFor="content">N·ªôi dung b√†i vi·∫øt *</label>
              <ReactQuill
                theme="snow"
                value={content}
                onChange={setContent}
                modules={quillModules}
                placeholder="Chia s·∫ª c√¢u chuy·ªán, ki·∫øn th·ª©c, tr·∫£i nghi·ªám c·ªßa b·∫°n..."
                className="content-editor"
              />
            </div>

            <div className="form-group">
              <div className="publish-options">
                <div className="checkbox-group">
                  <input
                    type="checkbox"
                    id="published"
                    checked={published}
                    onChange={(e) => setPublished(e.target.checked)}
                  />
                  <label htmlFor="published">Xu·∫•t b·∫£n ngay</label>
                </div>
                <p className="publish-note">
                  {published ? 'B√†i vi·∫øt s·∫Ω ƒë∆∞·ª£c hi·ªÉn th·ªã c√¥ng khai ngay l·∫≠p t·ª©c' : 'B√†i vi·∫øt s·∫Ω ƒë∆∞·ª£c l∆∞u nh∆∞ b·∫£n nh√°p'}
                </p>
              </div>
            </div>
          </div>
        </form>
      </div>
      
      <Footer />
    </div>
  );
};

export default CreateBlog;
