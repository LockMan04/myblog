import React, { useState, useEffect } from 'react';
import { useAuth } from '../contexts/AuthContext';
import { useNavigate } from 'react-router-dom';
import { toast } from 'sonner';
import { collection, query, where, orderBy, getDocs, doc, updateDoc, deleteDoc } from 'firebase/firestore';
import { db } from '../firebase/config';
import { toggleBlogVisibility, archiveBlog, softDeleteBlog } from '../firebase/blogService';
import EditBlog from '../components/EditBlog';
import { Slab } from 'react-loading-indicators';
import '../styles/BlogManagement.css';

const BlogManagement = () => {
  const { currentUser, role } = useAuth();
  const navigate = useNavigate();
  const [blogs, setBlogs] = useState([]);
  const [loading, setLoading] = useState(true);
  const [editingBlog, setEditingBlog] = useState(null);
  const isAdmin = role === 'admin';
  const [filter, setFilter] = useState('all'); // all, published, hidden, archived

  useEffect(() => {
    if (currentUser) {
      fetchUserBlogs();
    }
  }, [currentUser, filter]);

  const fetchUserBlogs = async () => {
    try {
      setLoading(true);
      const blogsRef = collection(db, 'blogs');
      let q;
      
      if (isAdmin) {
        // Admin c√≥ th·ªÉ xem t·∫•t c·∫£ blogs
        q = query(
          blogsRef,
          orderBy('createdAt', 'desc')
        );
      } else {
        // User th∆∞·ªùng ch·ªâ xem blogs c·ªßa m√¨nh
        q = query(
          blogsRef,
          where('authorId', '==', currentUser.uid),
          orderBy('createdAt', 'desc')
        );
      }

      const querySnapshot = await getDocs(q);
      let blogsList = [];
      
      querySnapshot.forEach((doc) => {
        const blogData = { id: doc.id, ...doc.data() };
        
        // Filter based on status
        if (filter === 'all') {
          blogsList.push(blogData);
        } else if (filter === 'published' && blogData.published === true && !blogData.archived) {
          blogsList.push(blogData);
        } else if (filter === 'hidden' && blogData.published === false && !blogData.archived) {
          blogsList.push(blogData);
        } else if (filter === 'archived' && blogData.archived === true) {
          blogsList.push(blogData);
        }
      });

      setBlogs(blogsList);
    } catch (error) {
      console.error('L·ªói khi t·∫£i blogs:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleStatusChange = async (blogId, newStatus) => {
    try {
      if (newStatus.hasOwnProperty('published')) {
        // S·ª≠ d·ª•ng toggle function
        const currentBlog = blogs.find(blog => blog.id === blogId);
        await toggleBlogVisibility(blogId, currentBlog.published);
        toast.success(
          currentBlog.published ? 'ƒê√£ ·∫©n b√†i vi·∫øt' : 'ƒê√£ hi·ªÉn th·ªã b√†i vi·∫øt',
          {
            description: currentBlog.published ? 'B√†i vi·∫øt ƒë√£ ƒë∆∞·ª£c ·∫©n' : 'B√†i vi·∫øt ƒë√£ ƒë∆∞·ª£c hi·ªÉn th·ªã',
            icon: currentBlog.published ? 'üëÅÔ∏è‚Äçüó®Ô∏è' : 'üëÅÔ∏è'
          }
        );
      } else if (newStatus.archived) {
        await archiveBlog(blogId);
        toast.success('ƒê√£ l∆∞u tr·ªØ b√†i vi·∫øt', {
          description: 'B√†i vi·∫øt ƒë√£ ƒë∆∞·ª£c chuy·ªÉn v√†o m·ª•c l∆∞u tr·ªØ',
          icon: 'üìÅ'
        });
      }
      
      // Refresh data
      fetchBlogs();
    } catch (error) {
      console.error('L·ªói khi c·∫≠p nh·∫≠t status:', error);
      toast.error('C√≥ l·ªói x·∫£y ra', {
        description: 'Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i b√†i vi·∫øt. Vui l√≤ng th·ª≠ l·∫°i.'
      });
    }
  };

  const handleDelete = async (blogId) => {
    toast.error('X√°c nh·∫≠n x√≥a b√†i vi·∫øt', {
      description: 'B√†i vi·∫øt s·∫Ω b·ªã x√≥a t·∫°m th·ªùi v√† c√≥ th·ªÉ kh√¥i ph·ª•c trong 14 ng√†y',
      icon: 'üóëÔ∏è',
      action: {
        label: 'X√°c nh·∫≠n x√≥a',
        onClick: async () => {
          try {
            await softDeleteBlog(blogId);
            toast.warning('ƒê√£ x√≥a b√†i vi·∫øt', {
              description: 'B√†i vi·∫øt ƒë√£ ƒë∆∞·ª£c x√≥a t·∫°m th·ªùi. S·∫Ω b·ªã x√≥a vƒ©nh vi·ªÖn sau 14 ng√†y.',
              icon: 'üóëÔ∏è'
            });
            fetchBlogs(); // Refresh data
          } catch (error) {
            console.error('L·ªói khi x√≥a blog:', error);
            toast.error('C√≥ l·ªói x·∫£y ra', {
              description: 'Kh√¥ng th·ªÉ x√≥a b√†i vi·∫øt. Vui l√≤ng th·ª≠ l·∫°i.'
            });
          }
        }
      },
      cancel: {
        label: 'H·ªßy',
        onClick: () => {}
      }
    });
  };

  const getStatusText = (blog) => {
    if (blog.archived) return 'ƒê√£ l∆∞u tr·ªØ';
    if (blog.published) return 'ƒê√£ xu·∫•t b·∫£n';
    return '·∫®n';
  };

  const getStatusClass = (blog) => {
    if (blog.archived) return 'status-archived';
    if (blog.published) return 'status-published';
    return 'status-hidden';
  };

  if (!currentUser) {
    return (
      <div className="blog-management-container">
        <div className="auth-required">
          <h2>B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ qu·∫£n l√Ω blog</h2>
          <p>Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ xem v√† qu·∫£n l√Ω c√°c b√†i vi·∫øt c·ªßa b·∫°n.</p>
        </div>
      </div>
    );
  }

  if (loading) {
    return (
      <div className="loading-overlay">
        <Slab color={["#25df25", "#2582df", "#df25df", "#df8225"]} />
        <p>ƒêang t·∫£i danh s√°ch blog...</p>
      </div>
    );
  }

  return (
    <div className="blog-management-container">
      <div className="blog-management-header">
        <h1>Qu·∫£n l√Ω Blog c·ªßa t√¥i</h1>
        <button 
          className="btn-add-blog"
          onClick={() => navigate('/create-blog')}
        >
          <i className="fas fa-plus"></i>
          Vi·∫øt b√†i m·ªõi
        </button>
      </div>

      <div className="blog-filters">
        <button 
          className={filter === 'all' ? 'filter-btn active' : 'filter-btn'}
          onClick={() => setFilter('all')}
        >
          T·∫•t c·∫£ ({blogs.length})
        </button>
        <button 
          className={filter === 'published' ? 'filter-btn active' : 'filter-btn'}
          onClick={() => setFilter('published')}
        >
          ƒê√£ xu·∫•t b·∫£n
        </button>
        <button 
          className={filter === 'hidden' ? 'filter-btn active' : 'filter-btn'}
          onClick={() => setFilter('hidden')}
        >
          ·∫®n
        </button>
        <button 
          className={filter === 'archived' ? 'filter-btn active' : 'filter-btn'}
          onClick={() => setFilter('archived')}
        >
          L∆∞u tr·ªØ
        </button>
      </div>

      <div className="blogs-list">
        {blogs.length === 0 ? (
          <div className="no-blogs">
            <i className="fas fa-blog fa-3x"></i>
            <h3>Ch∆∞a c√≥ b√†i vi·∫øt n√†o</h3>
            <p>H√£y b·∫Øt ƒë·∫ßu vi·∫øt b√†i ƒë·∫ßu ti√™n c·ªßa b·∫°n!</p>
            <button 
              className="btn-add-blog"
              onClick={() => navigate('/create-blog')}
            >
              Vi·∫øt b√†i m·ªõi
            </button>
          </div>
        ) : (
          blogs.map(blog => (
            <div key={blog.id} className="blog-item">
              <div className="blog-image">
                <img src={blog.imageUrl} alt={blog.title} />
                <span className={`status-badge ${getStatusClass(blog)}`}>
                  {getStatusText(blog)}
                </span>
              </div>
              
              <div className="blog-content">
                <h3>{blog.title}</h3>
                <p className="blog-excerpt">{blog.excerpt}</p>
                <div className="blog-meta">
                  <span className="category">{blog.category}</span>
                  <span className="date">
                    {blog.createdAt?.toDate?.()?.toLocaleDateString('vi-VN') || 'Kh√¥ng r√µ'}
                  </span>
                  {isAdmin && blog.authorId !== currentUser.uid && (
                    <span className="author-info">
                      üë§ {blog.author || '·∫®n danh'}
                    </span>
                  )}
                  <span className="stats">
                    <i className="fas fa-eye"></i> {blog.views || 0} | 
                    <i className="fas fa-heart"></i> {blog.likes || 0}
                  </span>
                </div>
              </div>

              <div className="blog-actions">
                <button 
                  className="btn-edit"
                  onClick={() => setEditingBlog(blog)}
                  title="Ch·ªânh s·ª≠a"
                >
                  <i className="fas fa-edit"></i>
                </button>

                {blog.published && !blog.archived && (
                  <button 
                    className="btn-hide"
                    onClick={() => handleStatusChange(blog.id, { published: false })}
                    title="·∫®n b√†i vi·∫øt"
                  >
                    <i className="fas fa-eye-slash"></i>
                  </button>
                )}

                {!blog.published && !blog.archived && (
                  <button 
                    className="btn-publish"
                    onClick={() => handleStatusChange(blog.id, { published: true })}
                    title="Xu·∫•t b·∫£n"
                  >
                    <i className="fas fa-eye"></i>
                  </button>
                )}

                {!blog.archived && (
                  <button 
                    className="btn-archive"
                    onClick={() => handleStatusChange(blog.id, { archived: true, published: false })}
                    title="L∆∞u tr·ªØ"
                  >
                    <i className="fas fa-archive"></i>
                  </button>
                )}

                {blog.archived && (
                  <button 
                    className="btn-unarchive"
                    onClick={() => handleStatusChange(blog.id, { archived: false, published: true })}
                    title="Kh√¥i ph·ª•c"
                  >
                    <i className="fas fa-undo"></i>
                  </button>
                )}

                <button 
                  className="btn-delete"
                  onClick={() => handleDelete(blog.id)}
                  title="X√≥a vƒ©nh vi·ªÖn"
                >
                  <i className="fas fa-trash"></i>
                </button>
              </div>
            </div>
          ))
        )}
      </div>

      {editingBlog && (
        <EditBlog 
          blog={editingBlog}
          onClose={() => setEditingBlog(null)}
          onBlogUpdated={() => {
            setEditingBlog(null);
            fetchUserBlogs();
          }}
        />
      )}
    </div>
  );
};

export default BlogManagement;
